data_full <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full <- read.csv("../household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
getwd()
setwd("C:/DataScience/ExploringData")
data_full <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
hist(data$Global_active_power, main="Global Active Power",
hist(data$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
data_full <- read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data_full$Date <- as.Date(data_full$Date, format="%d/%m/%Y")
data <- subset(data_full, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data_full)
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
plot(data$Global_active_power~data$Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
with(data, {
with(data, { plot(Sub_metering_1~Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="") lines(Sub_metering_2~Datetime,col='Red') lines(Sub_metering_3~Datetime,col='Blue')})
with(data, {plot(Sub_metering_1~Datetime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
## Saving to file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
?readRDS
libary(readRDS)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
dir()
dir()
setwd("C:/DataScience/ExploringData")
setwd("C:/DataScience/ExploringData")
unzip("./ExData_Plotting2/exdata-data-NEI_data.zip", exdir = "./ExData_Plotting2/")
setwd("C:/DataScience/ExploringData")
?unzip()
unzip("./ExData_Plotting2/exdata-data-NEI_data.zip")
unzip("/ExData_Plotting2/exdata-data-NEI_data.zip")
unzip("/ExData_Plotting2/exdata_data_NEI_data.zip")
unzip("/ExData_Plotting2/exdata_data_NEI_data.zip")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip", exdir = ""./ExData_Plotting2/"")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip", exdir = "./ExData_Plotting2/"")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip", exdir = "./ExData_Plotting2/")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip", exdir = "./ExData_Plotting2/" )
unzip("/ExData_Plotting2/exdata_data_NEI_data.zip", exdir = "/ExData_Plotting2/" )
# Check if both data exist. If not, load the data.
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip" )
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip",overwrite = TRUE, exdir = ".")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip",overwrite = TRUE, exdir = "./ExData_Plotting2/")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip",overwrite = TRUE, exdir = "./ExData_Plotting2/")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip",overwrite = TRUE, exdir = "./ExData_Plotting2")
if (!"neiData" %in% ls()) {
neiData <- readRDS("./ExData_Plotting2/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./ExData_Plotting2/Source_Classification_Code.rds")
}
head(neiData)
head(sccData)
dim(neiData) # 6497651 6
dim(sccData) # 11717 15
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot1.png",
width = 480, height = 480,
units = "px")
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./ExData_Plotting2/plot1.png",
width = 480, height = 480,
units = "px")
totalEmissions <- aggregate(neiData$Emissions, list(neiData$year), FUN = "sum")
plot(totalEmissions, type = "l", xlab = "Year",
main = "Total Emissions in the United States from 1999 to 2008",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
setwd("C:/DataScience/ExploringData")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip",overwrite = TRUE, exdir = "./ExData_Plotting2")
if (!"neiData" %in% ls()) {
neiData <- readRDS("./ExData_Plotting2/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./ExData_Plotting2/Source_Classification_Code.rds")
}
subset <- neiData[neiData$fips == "24510", ]
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./ExData_Plotting2/plot2.png",
width = 480, height = 480,
units = "px")
totalEmissions <- aggregate(subset$Emissions, list(subset$year), FUN = "sum")
plot(totalEmissions, type = "l", xlab = "Year",
main = "Total Emissions in Baltimore City from 1999 to 2008",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip",overwrite = TRUE, exdir = "./ExData_Plotting2")
if (!"neiData" %in% ls()) {
neiData <- readRDS("./ExData_Plotting2/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./ExData_Plotting2/Source_Classification_Code.rds")
}
subset <- neiData[neiData$fips == "24510", ]
library(ggplot2)
install.packages("ggploy2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
setwd("C:/DataScience/ExploringData")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip",overwrite = TRUE, exdir = "./ExData_Plotting2")
if (!"neiData" %in% ls()) {
neiData <- readRDS("./ExData_Plotting2/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./ExData_Plotting2/Source_Classification_Code.rds")
}
subset <- neiData[neiData$fips == "24510", ]
library(ggplot2)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./ExData_Plotting2/plot3.png",
width = 480, height = 480,
units = "px")
g <- ggplot(subset, aes(year, Emissions, color = type))
g + geom_line(stat = "summary", fun.y = "sum") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle("Total Emissions in Baltimore City from 1999 to 2008")
dev.off()
setwd("C:/DataScience/ExploringData")
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip",overwrite = TRUE, exdir = "./ExData_Plotting2")
if (!"neiData" %in% ls()) {
neiData <- readRDS("./ExData_Plotting2/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./ExData_Plotting2/Source_Classification_Code.rds")
}
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot4.png",
png(filename = "./ExData_Plotting2/plot4.png",
width = 480, height = 480,
units = "px")
units = "px")
png(filename = "./ExData_Plotting2/plot4.png",
width = 480, height = 480,
units = "px")
coal <- grep("coal", sccData$Short.Name, ignore.case = T)
coal <- sccData[coal, ]
coal <- neiData[neiData$SCC %in% coal$SCC, ]
coalEmissions <- aggregate(coal$Emissions, list(coal$year), FUN = "sum")
plot(coalEmissions, type = "l", xlab = "Year",
main = "Total Emissions From Coal Combustion-related\n Sources from 1999 to 2008",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
unzip("./ExData_Plotting2/exdata_data_NEI_data.zip",overwrite = TRUE, exdir = "./ExData_Plotting2")
# Check if both data exist. If not, load the data.
if (!"neiData" %in% ls()) {
neiData <- readRDS("./ExData_Plotting2/summarySCC_PM25.rds")
}
if (!"sccData" %in% ls()) {
sccData <- readRDS("./ExData_Plotting2/Source_Classification_Code.rds")
}
subset <- neiData[neiData$fips == "24510", ]
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./figure/plot5.png",
width = 480, height = 480,
units = "px")
motor <- grep("motor", sccData$Short.Name, ignore.case = T)
motor <- sccData[motor, ]
motor <- subset[subset$SCC %in% motor$SCC, ]
motorEmissions <- aggregate(motor$Emissions, list(motor$year), FUN = "sum")
plot(motorEmissions, type = "l", xlab = "Year",
main = "Total Emissions From Motor Vehicle Sources\n from 1999 to 2008 in Baltimore City",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
subset <- neiData[neiData$fips == "24510", ]
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./ExData_Plotting2/plot5.png",
width = 480, height = 480,
units = "px")
motor <- grep("motor", sccData$Short.Name, ignore.case = T)
motor <- sccData[motor, ]
motor <- subset[subset$SCC %in% motor$SCC, ]
motorEmissions <- aggregate(motor$Emissions, list(motor$year), FUN = "sum")
plot(motorEmissions, type = "l", xlab = "Year",
main = "Total Emissions From Motor Vehicle Sources\n from 1999 to 2008 in Baltimore City",
ylab = expression('Total PM'[2.5]*" Emission"))
dev.off()
subset <- neiData[neiData$fips == "24510"|neiData$fips == "06037", ]
library(ggplot2)
par("mar"=c(5.1, 4.5, 4.1, 2.1))
png(filename = "./ExData_Plotting2/plot6.png",
width = 480, height = 480,
units = "px", bg = "transparent")
motor <- grep("motor", sccData$Short.Name, ignore.case = T)
motor <- sccData[motor, ]
motor <- subset[subset$SCC %in% motor$SCC, ]
g <- ggplot(motor, aes(year, Emissions, color = fips))
g + geom_line(stat = "summary", fun.y = "sum") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle("Comparison of Total Emissions From Motor\n Vehicle Sources in Baltimore City\n and Los Angeles County from 1999 to 2008") +
scale_colour_discrete(name = "Group", label = c("Los Angeles","Baltimore"))
dev.off()
library(R.utils)
install.packages("r.utils")
install.packages("R.utils")
library(R.utils)
library(ggplot2)
library(plyr)
data_url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(data_url, destfile = "data.csv.bz2", method = "wget")
bunzip2("data.csv.bz2")
download.file(data_url, destfile = "data.csv.bz2", method = "wget")
data_url <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(data_url, destfile = "data.csv.bz2", method = "wget")
download.file(data_url, destfile = "data.csv.bz2", method = "wd")
data_url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(data_url, destfile = "data.csv.bz2", method = "auto")
bunzip2("data.csv.bz2")
data <- read.csv("data.csv")
health <- data[,c("EVTYPE","FATALITIES","INJURIES")]
health$CASUALTIES <- health$FATALITIES + health$INJURIES
healthsummary <- ddply(health, .(EVTYPE), summarize, TOTAL=sum(CASUALTIES))
damage <- data[,c("EVTYPE","PROPDMG","PROPDMGEXP","CROPDMG","CROPDMGEXP")]
damage$PROPMULT <- rep(0, nrow(damage))
damage$PROPMULT[damage$PROPDMGEXP == "B"] <- 1000000000
damage$PROPMULT[damage$PROPDMGEXP == "M"] <- 1000000
damage$PROPMULT[damage$PROPDMGEXP == "K"] <- 1000
damage$PROPMULT[damage$PROPDMGEXP == "H"] <- 100
damage$CROPMULT <- rep(0, nrow(damage))
damage$CROPMULT[damage$CROPDMGEXP == "B"] <- 1000000000
damage$CROPMULT[damage$CROPDMGEXP == "M"] <- 1000000
damage$CROPMULT[damage$CROPDMGEXP == "K"] <- 1000
damage$CROPMULT[damage$CROPDMGEXP == "H"] <- 10
damage$TOTAL <- damage$PROPDMG * damage$PROPMULT + damage$CROPDMG * damage$CROPMULT
damagesummary <- ddply(damage, .(EVTYPE), summarize, TOTAL=sum(TOTAL))
ggplot(healthsummary[order(healthsummary$TOTAL, decreasing = TRUE)[1:10],], aes(x = reorder(EVTYPE, TOTAL), y = TOTAL)) + geom_bar(stat="identity") + coord_flip() + xlab("Event") + ylab("Casualties") + ggtitle("Casualties by Event")
ggplot(damagesummary[order(damagesummary$TOTAL, decreasing = TRUE)[1:10],], aes(x = reorder(EVTYPE, TOTAL), y = TOTAL)) + geom_bar(stat="identity") + coord_flip() + xlab("Event") + ylab("Economic Losses") + ggtitle("Economic Losses by Event")
summary(data)
data_url <- "https://d396qusza40orc.cloudfront.net/repdata/data/StormData.csv.bz2"
download.file(data_url, destfile = "data.csv.bz2", method = "wget")
getwd()
install.packages("pdflatex")
install.packages("TeX")
install.packages("pandoc")
install.packages("markdown")
qnorm(.75,80,10)
qnorm(0.7,80,10)
?qnorm()
rnorm(.7,80,10 )
rnorm(0.7,80,10 )
?rnorm()
pnorm(.7,80,10)
pnorm(.7,80,10, lower.tail=true)
pnorm(70,80,10)
pnorm(95,1100,75)
round(qnorm(0.95,100,7.5))
round(qnorm(95,100,7.5))
round(qnorm(95,100,7.5)*100)
round(qnorm(95,100,7.5))*100
round(qnorm(0.95,100,7.5))*100
?pbino()
?pbinom()
round(pbinom(3,5,0.5, lower.tail=FALSE)*100)
library(datasets)
data("ToothGrowth")
attach(ToothGrowth)
str(ToothGrowth)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
minu <- sum(x*w) / sum(w)
final <- sum(w*(x-minu)^2)
c(minu, final)
?mins
?minu
?lm()
?predict()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
coef(fit)
est<-predict(fit,data.frame(x))
est
plot(x,y)
abline(fit,col="red")
summary(fit)
summary(fit)$confident
?predict
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
fit5<-lm(y ~ 1)
fit6<-lm(y ~ x - 1)
plot(x,y)
abline(fit,col="red")
abline(fit5,col="blue")
abline(fit6,col="green")
anova(fit)
anova(fit5)
anova(fit6)
dump("mtcars", file="")
?mtcar
??mtcar
help(resid)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
fit<-lm(y~x)
coef(fit)
?coef()
coef(fit,8)
data
?data()
data(mtcars,gear=4)
data(mtcars)
head(data)
head(mtcars)
head(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
mtcars1 <- subset(mtcars, cyl="4")
mtcars1 <- subset(mtcars, cyl='4')
mtcars1 <- subset(mtcars, cyl==4)
mtcars1 <- subset(mtcars, cyl==4)
data(mtcars, cyl==4)
data(mtcars, cyl==4)
data(mtcars)
df <- data(mtcars)
head(df)
?data()
data(mtcars(cyl==8))
data(mtcars(cyl="8"))
require(mtcars)
data(mtcars)
headC(data(cyl="8"))
head(data(cyl="8"))
help(mtcars)
mtcars["cyl"]
mtcars["wt", "mpg", "cyl"==8]
mtcars["wt", "mpg", cyl==8]
mtcars["wt", "mpg", "cyl"]
mtcars["wt", "mpg", cyl==8]
mtcars["wt", "mpg"]
mtcars["wt", "mpg"]
heat(mtcars)
head(mtcars)
mpg = subset(mtcars, cyl=='8', select=mpg)
head(mpg)
mpg = subset(mtcars, cyl=='8', select=mpg,wt)
mpg = subset(mtcars, cyl=='8', select=mpg, select = wt)
mpg = subset(mtcars, cyl=='8', select=mpg, select=wt)
mpg = subset(mtcars, cyl=='8')
head(mpg)
data(mtcars)
Cyl8 = subset(mtcars, cyl=='8')
head(Cyl8)
x<-cyl8$wt
data(mtcars)
Cyl8 <- subset(mtcars, cyl=='8')
head(Cyl8)
x<-cyl8$wt
data(mtcars)
cyl8 <- subset(mtcars, cyl=='8')
head(cyl8)
x<-cyl8$wt
y<-cyl8$mpg
fit1<-lm(y ~ x)
coef(fit1)
cyl4 <- subset(mtcars, cyl=='4')
head(cyl4)
x<-cyl4$wt
y<-cyl4$mpg
fit2<-lm(y ~ x)
coef(fit2)
data(mtcars)
cyl8 <- subset(mtcars, cyl=='8')
head(cyl8)
x8<-cyl8$wt
y8<-cyl8$mpg
fit1<-lm(y8 ~ x8)
coef(fit1)
cyl4 <- subset(mtcars, cyl=='4')
head(cyl4)
x4<-cyl4$wt
y4<-cyl4$mpg
fit2<-lm(y4 ~ x4)
coef(fit2)
est<-predict(fit1,data.frame(x8))
est
summaryC(fit2))$coefficients
summary(fit2)$coefficients
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(I(child - mean(child))~ I(parent - mean(parent)) - 1, data = galton)
data(galton)
library("rpart.plot", lib.loc="~/R/win-library/3.1")
install.packages("confusionMatrix")
install.packages("confusionMatrix")
library("rpart.plot", lib.loc="~/R/win-library/3.1")
install.packages("rpair")
install.packages('rpair', type="source")
install.packages("caret',dependencies='c("Depends","Suggests"))
install.packages("caret",dependencies='c("Depends","Suggests"))
install.packages("caret", dependencies=c("Depends", "Suggests"))
library("rpart.plot", lib.loc="~/R/win-library/3.1")
detach("package:rpart", unload=TRUE)
library("rpart", lib.loc="C:/Program Files/R/R-3.1.3/library")
detach("package:rpart.plot", unload=TRUE)
library("rpart.plot", lib.loc="~/R/win-library/3.1")
install.packages("rpart.plot")
setwd("C:/DataScience/9DataProduct")
install.packages("devtools")
library(devtools)
runapp()
getwd()
date: "Saturday, February 21, 2015"
setwd("C:/DataScience/Regression Models")
output: pdf_document
library(slidify)
install_package(slidify)
install_packages(slidify)
install.packages(slidify)
install.packages(slidify)
install.packages("slidify")
install_github('slidify', 'ramnathv')
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
Library(slidify)
install_github('slidifyLibraries','ramnathv/slidifyLibraries')
install_github('slidifyLibraries','ramnathv')
Library(slidify)
library(slidify)
setwd("C:/DataScience/9DataProduct")
author("Cars")
setwd("C:/DataScience/9DataProduct")
runExample("064_telephones-by-region")
runExample("064_telephones-by-region")
runExample("064-telephones-by-region")
runApp("064-telephones-by-region")
library(shiny)
runApp("064-telephones-by-region")
runApp("086-bus-dashboard")
runApp("051-movie-explorer")
install.packages("ggvis")
runApp("051-movie-explorer")
install.packages("RSQLite")
runApp("051-movie-explorer")
data(mtcar)
data(mtcars)
summary(mtcars)
head(mtcars)
nrow(mtcars)
runapp(cars)
getwd
getwd()
setwd("C:/DataScience/9DataProduct/Cars")
runapp()
runapp(cars)
setwd("C:/DataScience/9DataProduct")
runapp(cars)
runApp("cars")
runApp(https://github.com/Senthilkumar-k/DevDataProd-CourseProject)
runApp("https://github.com/Senthilkumar-k/DevDataProd-CourseProject")
runApp("Assignment")
runApp("Assignment")
install.packages("data.table")
runApp("Assignment")
shiny::runApp('Assignment')
shiny::runApp('Assignment')
shiny::runApp('Assignment')
runApp("Assignment")
runApp("Assignment")
getwd()
runApp("Assignment")
shiny::runApp("004-mpg")
runApp("Assignment")
library("ggvis", lib.loc="~/R/win-library/3.1")
runApp("Cars")
runApp("004-mpg")
runApp("carmpg")
runApp("carmpg")
runApp("carmpg")
runApp("carmpg")
